# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine bump2version
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Bump version
      run: |
        sed "s/version.*/version='$(curl -Lsk https://pypi.org/pypi/github-utils-api/json | jq -r .info.version)',/" setup.py > setup.py2
        mv setup.py2 setup.py
        bump2version --allow-dirty --current-version $(grep 'version=' setup.py | awk -v FS="'" '{print $2}') setup.py minor
    - name: Generating Artifacts
      run: |
        cp README.rst README.md
        python setup.py sdist bdist_wheel
    - name: pypi-publish
      uses: pypa/gh-action-pypi-publish@v1.5.0
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
      if: github.event_name != 'pull_request'
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        path: dist/
      if: github.event_name != 'pull_request'

